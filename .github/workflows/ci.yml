# This file is automatically added by @npmcli/template-oss. Do not edit.

name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
  schedule:
    # "At 09:00 UTC (02:00 PT) on Monday" https://crontab.guru/#0_9_*_*_1
    - cron: "0 9 * * 1"

jobs:
  lint:
    name: Lint
    if: github.repository_owner == 'npm'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Git User
        run: |
          git config --global user.email "npm-cli+bot@github.com"
          git config --global user.name "npm CLI robot"
      - name: Setup Node
        uses: actions/setup-node@v3
        id: node
        with:
          node-version: 20.x
          check-latest: contains('20.x', '.x')

      - name: Install Latest npm
        shell: bash
        env:
          NODE_VERSION: ${{ steps.node.outputs.node-version }}
        run: |
          MATCH=""
          SPECS=("latest" "next-10" "next-9" "next-8" "next-7" "next-6")

          echo "node@$NODE_VERSION"

          for SPEC in ${SPECS[@]}; do
            ENGINES=$(npm view npm@$SPEC --json | jq -r '.engines.node')
            echo "Checking if node@$NODE_VERSION satisfies npm@$SPEC ($ENGINES)"

            if npx semver -r "$ENGINES" "$NODE_VERSION" > /dev/null; then
              MATCH=$SPEC
              echo "Found compatible version: npm@$MATCH"
              break
            fi  
          done

          if [ -z $MATCH ]; then
            echo "Could not find a compatible version of npm for node@$NODE_VERSION"
            exit 1
          fi

          npm i --prefer-online --no-fund --no-audit -g npm@$MATCH

      - name: npm Version
        run: npm -v
      - name: Install Dependencies
        run: npm i --ignore-scripts --no-audit --no-fund
      - name: Lint
        run: npm run lint --ignore-scripts
      - name: Post Lint
        run: npm run postlint --ignore-scripts

  test:
    name: Test - ${{ matrix.platform.name }} - ${{ matrix.node-version }}
    if: github.repository_owner == 'npm'
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Linux
            os: ubuntu-latest
            shell: bash
          - name: macOS
            os: macos-latest
            shell: bash
          - name: Windows
            os: windows-latest
            shell: cmd
        node-version:
          - 14.17.0
          - 14.x
          - 16.13.0
          - 16.x
          - 18.0.0
          - 18.x
          - 20.x
    runs-on: ${{ matrix.platform.os }}
    defaults:
      run:
        shell: ${{ matrix.platform.shell }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Git User
        run: |
          git config --global user.email "npm-cli+bot@github.com"
          git config --global user.name "npm CLI robot"
      - name: Setup Node
        uses: actions/setup-node@v3
        id: node
        with:
          node-version: ${{ matrix.node-version }}
          check-latest: contains(matrix.node-version, '.x')

      # node 10/12/14 ship with npm@6, which is known to fail when updating itself in windows
      - name: Update Windows npm
        if: |
          matrix.platform.os == 'windows-latest' && (
            startsWith(steps.node.outputs.node-version, 'v10.') ||
            startsWith(steps.node.outputs.node-version, 'v12.') ||
            startsWith(steps.node.outputs.node-version, 'v14.')
          )
        run: |
          curl -sO https://registry.npmjs.org/npm/-/npm-7.5.4.tgz
          tar xf npm-7.5.4.tgz
          cd package
          node lib/npm.js install --no-fund --no-audit -g ..\npm-7.5.4.tgz
          cd ..
          rmdir /s /q package

      - name: Install Latest npm
        shell: bash
        env:
          NODE_VERSION: ${{ steps.node.outputs.node-version }}
        run: |
          MATCH=""
          SPECS=("latest" "next-10" "next-9" "next-8" "next-7" "next-6")

          echo "node@$NODE_VERSION"

          for SPEC in ${SPECS[@]}; do
            ENGINES=$(npm view npm@$SPEC --json | jq -r '.engines.node')
            echo "Checking if node@$NODE_VERSION satisfies npm@$SPEC ($ENGINES)"

            if npx semver -r "$ENGINES" "$NODE_VERSION" > /dev/null; then
              MATCH=$SPEC
              echo "Found compatible version: npm@$MATCH"
              break
            fi  
          done

          if [ -z $MATCH ]; then
            echo "Could not find a compatible version of npm for node@$NODE_VERSION"
            exit 1
          fi

          npm i --prefer-online --no-fund --no-audit -g npm@$MATCH

      - name: npm Version
        run: npm -v
      - name: Install Dependencies
        run: npm i --ignore-scripts --no-audit --no-fund
      - name: Add Problem Matcher
        run: echo "::add-matcher::.github/matchers/tap.json"
      - name: Test
        run: npm test --ignore-scripts
